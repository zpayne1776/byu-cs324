#include <stdio.h>
#include <string.h>

/* Recommended max cache and object sizes */
#define MAX_CACHE_SIZE 1049000
#define MAX_OBJECT_SIZE 102400

static const char *user_agent_hdr = "User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:97.0) Gecko/20100101 Firefox/97.0";

int all_headers_received(char *);
int parse_request(char *, char *, char *, char *, char *, char *);
void test_parser();
void print_bytes(unsigned char *, int);



int main()
{
	test_parser();
	printf("%s\n", user_agent_hdr);
	return 0;
}

int all_headers_received(char *request) {
	char *eoh = "\r\n\r\n";
	if (strstr(request, eoh) != NULL) {
		return 1;
	} else {
		return 0;
	}
}

void wipeStrings(char *method, char *hostname, char *port, char *path, char *headers) {
	memset(method, 0, strlen(method));
	memset(hostname, 0, strlen(hostname));
	memset(port, 0, strlen(port));
	memset(path, 0, strlen(path));
	memset(headers, 0, strlen(headers));
}

int parse_request(char *request, char *method,
		char *hostname, char *port, char *path, char *headers) {
	

	char space[] = " ";
	char slash[] = "/";
	char colon[] = ":";

	int length = strcspn(request, space);
	//char temp1[length];
	method = strncpy(method, request, length);

	//int hostStart = length+8;

	char *temp2 = strstr(&strstr(request, slash)[1], slash);
	//printf("\tTemp 2: %s\n", temp2);
	//fflush(stdout);
	char temp3[72];
	memset(temp3, 0, 72);
	//printf("\tSetting temp3\n");
	//fflush(stdout);
	strncpy(temp3, &temp2[1], strcspn(&temp2[1], slash));
	//printf("\tSetting hostname\n)");
	//fflush(stdout);
	hostname = strncpy(hostname, temp3, strcspn(temp3, colon));
	//printf("\tHostname: [%s]\n", hostname);
	//fflush(stdout);
	if (strstr(temp3, colon) != NULL) {
		//printf("\tIn port check\n");
		//fflush(stdout);
		port = strncpy(port, &strstr(temp3, colon)[1], strlen(&strstr(temp3, colon)[1]));
		//printf("\tReturning from port check\n");
		//fflush(stdout);
	} else {
		//printf("\tSetting default port\n");
		//fflush(stdout);
		port = strcpy(port, "80");
	}

	char *temp4 = strstr(&temp2[1], slash);
	path = strncpy(path, &temp4[1], strcspn(temp4, space));

	return 1;
}

void test_parser() {
	int i;
	char method[16], hostname[64], port[8], path[64], headers[1024];

	memset(method, 0, sizeof(method));
	memset(hostname, 0, sizeof(hostname));
	memset(port, 0, sizeof(port));
	memset(path, 0, sizeof(path));
	memset(headers, 0, sizeof(headers));

       	char *reqs[] = {
		"GET http://www.example.com/index.html HTTP/1.0\r\n"
		"Host: www.example.com\r\n"
		"User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0\r\n"
		"Accept-Language: en-US,en;q=0.5\r\n\r\n",

		"GET http://www.example.com:8080/index.html?foo=1&bar=2 HTTP/1.0\r\n"
		"Host: www.example.com:8080\r\n"
		"User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0\r\n"
		"Accept-Language: en-US,en;q=0.5\r\n\r\n",

		"GET http://localhost:1234/home.html HTTP/1.0\r\n"
		"Host: localhost:1234\r\n"
		"User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0\r\n"
		"Accept-Language: en-US,en;q=0.5\r\n\r\n",

		"GET http://www.example.com:8080/index.html HTTP/1.0\r\n",

		NULL
	};
	
	for (i = 0; reqs[i] != NULL; i++) {
		printf("Testing %s\n", reqs[i]);
		fflush(stdout);
		if (parse_request(reqs[i], method, hostname, port, path, headers)) {
			printf("METHOD: %s\n", method);
			printf("HOSTNAME: %s\n", hostname);
			printf("PORT: %s\n", port);
			printf("HEADERS: %s\n", headers);
			fflush(stdout);
		} else {
			printf("REQUEST INCOMPLETE\n");
			fflush(stdout);
		}
		wipeStrings(method, hostname, port, path, headers);
	}
}

void print_bytes(unsigned char *bytes, int byteslen) {
	int i, j, byteslen_adjusted;

	if (byteslen % 8) {
		byteslen_adjusted = ((byteslen / 8) + 1) * 8;
	} else {
		byteslen_adjusted = byteslen;
	}
	for (i = 0; i < byteslen_adjusted + 1; i++) {
		if (!(i % 8)) {
			if (i > 0) {
				for (j = i - 8; j < i; j++) {
					if (j >= byteslen_adjusted) {
						printf("  ");
					} else if (j >= byteslen) {
						printf("  ");
					} else if (bytes[j] >= '!' && bytes[j] <= '~') {
						printf(" %c", bytes[j]);
					} else {
						printf(" .");
					}
				}
			}
			if (i < byteslen_adjusted) {
				printf("\n%02X: ", i);
			}
		} else if (!(i % 4)) {
			printf(" ");
		}
		if (i >= byteslen_adjusted) {
			continue;
		} else if (i >= byteslen) {
			printf("   ");
		} else {
			printf("%02X ", bytes[i]);
		}
	}
	printf("\n");
}
